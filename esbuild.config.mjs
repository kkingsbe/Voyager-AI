import esbuild from "esbuild";
import process from "process";
import builtins from "builtin-modules";
import path from "path";
import { fileURLToPath } from 'url';
import fs from 'fs';

const banner =
`/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/
`;

const prod = (process.argv[2] === "production");

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);
const outdir = path.join(__dirname, "dist");

console.log(`Build starting. Output directory: ${outdir}`);
console.log(`Production mode: ${prod}`);

const context = await esbuild.context({
	banner: {
		js: banner,
	},
	entryPoints: ["main.ts", "styles.css"],
	bundle: true,
	external: [
		"obsidian",
		"electron",
		"@codemirror/autocomplete",
		"@codemirror/collab",
		"@codemirror/commands",
		"@codemirror/language",
		"@codemirror/lint",
		"@codemirror/search",
		"@codemirror/state",
		"@codemirror/view",
		"@lezer/common",
		"@lezer/highlight",
		"@lezer/lr",
		...builtins],
	format: "cjs",
	target: "es2018",
	logLevel: "info",
	sourcemap: prod ? false : "inline",
	treeShaking: true,
	outdir: outdir,
	minify: prod,
	loader: {
		'.js': 'jsx',
		'.css': 'css',
	},
	plugins: [
		{
			name: 'css-bundle',
			setup(build) {
				build.onResolve({ filter: /^styles\.css$/ }, args => {
					return { path: path.resolve(args.resolveDir, args.path) };
				});
			},
		},
	],
});

console.log("esbuild context created successfully");

if (prod) {
	console.log("Starting production build...");
	try {
		await context.rebuild();
		console.log("Production build completed successfully");
	} catch (error) {
		console.error("Build failed:", error);
		process.exit(1);
	}
	console.log("Production build completed");
	process.exit(0);
} else {
	console.log("Starting watch mode...");
	await context.watch();
	console.log("Watch mode started");
}

console.log(`Build complete. Output directory: ${outdir}`);
console.log('Contents of output directory:');
fs.readdirSync(outdir).forEach(file => {
	console.log(file);
});